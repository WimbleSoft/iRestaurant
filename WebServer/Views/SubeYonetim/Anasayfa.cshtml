@{
    ViewBag.Title = "Anasayfa";
    Layout = "~/Views/Shared/subeYonetim_Layout.cshtml";
}
@model  iRestaurant.Controllers.ViewModelDemoVM
@foreach (var a in Model.Personeller.Where(x => x.personelId == (int)Session["girenId"]))
{
    <div class="modal fade bs-example-modal-lg" id="ayarlarGuncelleModal_@a.personelId" tabindex="-1" role="dialog" aria-labelledby="myModalLabel">
        <div class="modal-dialog" role="document">
            <div class="modal-content">
                <div class="modal-header">
                    <button type="button" class="close" data-dismiss="modal" aria-label="Close"><span aria-hidden="true">&times;</span></button>
                    <h4 class="modal-title" id="myModalLabel">Ayarlar Düzenle</h4>
                </div>
                <div class="modal-body">
                    <div class="row">
                        <div class="form-group">
                            <div class="col-md-6 col-lg-6 col-xs-12 col-sm-12">
                                <label>Personel Adı</label>
                                <input name="personelAd" type="text" id="personelAd_id_@a.personelId" class="form-control" placeholder="Personel Adını Girin" value="@a.personelAd">
                            </div>
                            <div class="col-md-6 col-lg-6 col-xs-12 col-sm-12">
                                <label>Personel Parola</label>
                                <input name="personelParola" type="password" required min="8" max="20" id="personelParola_id_@a.personelId" class="form-control" placeholder="Personel Parolasını Girin">
                            </div>
                        </div>
                        <div class="form-group">
                            <div class="col-md-6 col-lg-6 col-xs-12 col-sm-12">
                                <label>Personel Email</label>
                                <input name="personelEmail" type="text" id="personelEmail_id_@a.personelId" @if (a.yetki == false) { <text> disabled="disabled" readonly="readonly" </text> } class="form-control" placeholder="Personel Emailini Girin" value="@a.personelEmail">
                            </div>
                            <div class="col-md-6 col-lg-6 col-xs-12 col-sm-12">
                                <label>Personel Telefon</label>
                                <input name="personelTelefon" type="text" id="personelTelefon_id_@a.personelId" class="form-control" placeholder="Personel Telefonunu Girin" value="@a.personelTelefon">
                            </div>
                        </div>
                        <div class="form-group">
                            <div class="row" style="margin:unset !important;">
                                <div class="col-md-6 col-lg-6 col-xs-6 col-sm-6">
                                    <label> </label>
                                    <button type="button" class="btn btn-default btn-md btn-grad form-control" data-dismiss="modal">İptal</button>
                                </div>
                                <div class="col-md-6 col-lg-6 col-xs-6 col-sm-6">
                                    <label> </label>
                                    <button type="button" onclick="ayarlarGuncelle(this.id)" id="ayarlarGuncelle_id_@a.personelId" class="btn btn-warning btn-md btn-grad form-control">Güncelle</button>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
}
<script>
    document.getElementById("anasayfa").className = "active";
</script>
<!-- Content Wrapper. Contains page content -->
<div class="content-wrapper">
    <!-- Content Header (Page header) -->
    <section class="content-header">
        <h1>
            Anasayfa
        </h1>
        <ol class="breadcrumb">
            <li>
                <a href="#"><i class="fa fa-dashboard"></i> Anasayfa</a>
            </li>
        </ol>
    </section>
    @{
        DateTime sabahTarihSaat = DateTime.Now.Date.AddHours(3);//KASADA GÖZÜKEN O GÜN SABAH SAAT 6'DAN
        DateTime geceTarihSaat = DateTime.Now.Date.AddDays(1).AddHours(3);//KASADA GÖZÜKEN O GÜN GECE 24'TEN SONRAKİ 3 SAATE KADAR
        if (DateTime.Now.TimeOfDay <= new TimeSpan(3, 0, 0) && DateTime.Now.TimeOfDay >= new TimeSpan(0, 0, 0))
        {
            sabahTarihSaat = DateTime.Now.Subtract(new TimeSpan(24, 0, 0));
            geceTarihSaat = DateTime.Now.Subtract(new TimeSpan(24, 0, 0));
        }
    }
    <!-- Main content -->
    <section class="content">
        <!-- Small boxes (Stat box) -->
        <div class="row">
            <div class="col-lg-4 col-md-12 col-sm-12 col-xs-12 ui-sortable">
                <!-- small box -->
                <div class="small-box bg-aqua">
                    <div class="inner">
                        <h3>@Model.Masalar.Where(x => x.durum == true).Count()</h3>
                        <p>Dolu masa sayısı</p>
                    </div>
                    <div class="icon">
                        <i class="fa fa-tablet"></i>
                    </div>

                </div>
            </div>
            <div class="col-lg-4 col-md-12 col-sm-12 col-xs-12 ui-sortable">
                <!-- small box -->
                <div class="small-box bg-blue">
                    <div class="inner">
                        <h3>
                            @{
                                int adet = 0;
                                string urunlerAd = "Herhangi";
                            }
                            @{
                                var siparisData = (from sue in Model.SiparisUrunleriEkstralari
                                                   join su in Model.SiparisUrunleri on sue.siparisUrunlerId equals su.siparisUrunlerId
                                                   join s in Model.Siparisler.Where(x => x.siparisTarihi.Year == DateTime.Now.Year && x.siparisTarihi.Month == DateTime.Now.Month)
                                                   on su.siparislerId equals s.siparislerId
                                                   group sue.SiparisUrunleri.Siparisler by su.Urunler.urunAd into g
                                                   orderby g.Count() descending
                                                   select new { urunlerAd = g.Key, adet = g.Count() }
                                );
                                if (siparisData.Count() != 0)
                                {
                                    adet = siparisData.FirstOrDefault().adet;
                                }
                                if (siparisData.Count() != 0)
                                {
                                    urunlerAd = siparisData.FirstOrDefault().urunlerAd;
                                }
                            }
                            @adet adet @urunlerAd



                            <sup style="font-size: 25px">
                            </sup>
                        </h3>
                        <p>Bu ay en çok sipariş edilen ürün ve miktarı</p>
                    </div>
                    <div class="icon">
                        <i class="ion ion-ios-cart"></i>
                    </div>
                </div>
            </div>
            <div class="col-lg-4 col-md-12 col-sm-12 col-xs-12 ui-sortable">
                <!-- small box -->
                <div class="small-box bg-blue">
                    <div class="inner">

                        <h3>
                            @{
                                var siparisData2 = (from u in Model.Urunler
                                                    join sue in Model.SiparisUrunleriEkstralari on u.urunId equals sue.SiparisUrunleri.urunId
                                                    join su in Model.SiparisUrunleri on sue.siparisUrunlerId equals su.siparisUrunlerId
                                                    join s in Model.Siparisler.Where(x => x.siparisTarihi.Year == DateTime.Now.Year && x.siparisTarihi.Month == DateTime.Now.Month)
                                                    on su.siparislerId equals s.siparislerId
                                                    group sue.SiparisUrunleri.Siparisler by su.Urunler.UrunKategoriler.urunKategoriAd into g
                                                    orderby g.Count() descending
                                                    select new { urunKategoriAd = g.Key, adet = Model.SiparisUrunleri.Where(x => x.Urunler.UrunKategoriler.urunKategoriAd == g.Key).Count() }
                                                    ).Take(1).ToList();

                                int adet2 = 0;
                                string urunKategoriAd = "Hepsi";
                                if (siparisData2.Count() != 0)
                                {
                                    adet2 = siparisData2.FirstOrDefault().adet;
                                }
                                if (siparisData2.Count() != 0)
                                {
                                    urunKategoriAd = siparisData2.FirstOrDefault().urunKategoriAd;
                                }
                            }
                            @adet2
                            adet
                            @urunKategoriAd

                            <sup style="font-size: 25px"></sup>
                        </h3>

                        <p>En çok ürün verilen ürün miktarı ve kategorisi</p>
                    </div>
                    <div class="icon">
                        <i class="ion ion-bag"></i>
                    </div>
                </div>
            </div>

        </div>
        <div class="row">
            <div class="col-lg-4 col-md-12 col-sm-12 col-xs-12 ui-sortable">
                <!-- small box -->
                <div class="small-box bg-red">
                    <div class="inner">
                        <h3>
                            @Model.Urunler.Count()
                            <sup style="font-size: 25px"></sup>
                        </h3>
                        <p>Bulunan toplam ürün sayısı</p>
                    </div>
                    <div class="icon">
                        <i class="ion ion-ios-home"></i>
                    </div>
                </div>
            </div>
            <div class="col-lg-4 col-md-12 col-sm-12 col-xs-12 ui-sortable">
                <!-- small box -->
                <div class="small-box bg-green">
                    <div class="inner">
                        <h3>
                            @{
                                double? urunlerToplami = Model.Urunler.Sum(x => x.urunFiyat);
                                double? urunOzellikleriToplami = Model.UrunOzellikler.Sum(x => x.urunOzellikFiyat);
                                double? urunEkstralariToplami = Model.UrunEkstralar.Sum(x => x.urunEkstraFiyat);
                            }
                            @(urunlerToplami + urunOzellikleriToplami + urunEkstralariToplami)
                            <i class="fa fa-try"></i>
                            <sup style="font-size: 25px"></sup>
                        </h3>
                        <p>Ürünlerin toplam değeri</p>
                    </div>
                    <div class="icon">
                        <i class="ion ion-card"></i>
                    </div>
                </div>
            </div>
            <div class="col-md-4 col-md-12 col-sm-12 col-xs-12">
                <div class="info-box bg-red">
                    <span class="info-box-icon"><i class="fa fa-try"></i></span>

                    <div class="info-box-content">
                        <span class="info-box-text">AYLIK CİRO</span>
                        <span class="info-box-number">
                            @{
                                var siparisData3 = (from u in Model.Urunler
                                                    join sue in Model.SiparisUrunleriEkstralari on u.urunId equals sue.SiparisUrunleri.urunId
                                                    join su in Model.SiparisUrunleri on sue.siparisUrunlerId equals su.siparisUrunlerId
                                                    join s in Model.Siparisler.Where(x => x.siparisTarihi.Year == DateTime.Now.Year && x.siparisTarihi.Month == DateTime.Now.Month)
                                                                                on su.siparislerId equals s.siparislerId
                                                    select new { u, sue, su, s }
                                ).ToList();
                            }
                            @(siparisData3.Sum(x => x.su.UrunOzellikler.urunOzellikFiyat) + siparisData3.Sum(x => x.sue.UrunEkstralar.urunEkstraFiyat) + siparisData3.Sum(x => x.su.Urunler.urunFiyat))
                            <!--@(Model.SiparisUrunleri.Sum(x => x.UrunOzellikler.urunOzellikFiyat) + Model.SiparisUrunleriEkstralari.Sum(x => x.UrunEkstralar.urunEkstraFiyat) + Model.SiparisUrunleri.Sum(x => x.Urunler.urunFiyat)  )-->
                            <i class="fa fa-try"></i>
                        </span>

                        <div class="progress">
                            <div class="progress-bar" style="width:100%"></div>
                        </div>
                        <span class="progress-description">
                            Bu gün toplamı:
                            <!--(Model.SiparisUrunleri.Where(x => /*x.Siparisler.siparisTarihi.Date == DateTime.Now.Date*/ x.Siparisler.siparisTarihi >= sabahTarihSaat && x.Siparisler.siparisTarihi <= geceTarihSaat).Sum(x => x.UrunOzellikler.urunOzellikFiyat) + Model.SiparisUrunleriEkstralari.Where(x => x.SiparisUrunleri.Siparisler.siparisTarihi >= sabahTarihSaat && x.SiparisUrunleri.Siparisler.siparisTarihi <= geceTarihSaat /*x.SiparisUrunleri.Siparisler.siparisTarihi.Date == DateTime.Now.Date*/).Sum(x => x.UrunEkstralar.urunEkstraFiyat) + Model.SiparisUrunleri.Where(x => /*x.Siparisler.siparisTarihi.Date == DateTime.Now.Date*/ x.Siparisler.siparisTarihi >= sabahTarihSaat && x.Siparisler.siparisTarihi <= geceTarihSaat).Sum(x => x.Urunler.urunFiyat))-->
                            @Model.Odemeler.Where(x => x.odemeTarihi >= sabahTarihSaat && x.odemeTarihi <= geceTarihSaat).Sum(x => x.odemeMiktar)
                            <i class="fa fa-try"></i>
                        </span>
                    </div>
                    <!-- /.info-box-content -->
                </div>
                <!-- /.info-box -->
            </div>
        </div>
        <div class="row">
            <div class="col-lg-6 col-md-12 col-sm-12 col-xs-12 ui-sortable">
                <!-- PERSONEL PERFORMANSI CHART -->
                <div class="box box-primary">
                    <div class="box-header with-border">
                        <i class="fa fa-bar-chart-o"></i>
                        <h3 class="box-title">Siparişlerin personellere göre dağılımı</h3>
                        <span data-toggle="tooltip" title="" class="badge bg-yellow" data-original-title="Masa modu olarak belirlenmiş personeller bu tabloda dikkate alınmaz.">?</span>
                        <div class="box-tools pull-right">
                            <button type="button" class="btn btn-box-tool" data-widget="collapse">
                                <i class="fa fa-minus"></i>
                            </button>
                        </div>
                    </div>
                    <div class="box-body">
                        <div id="personelPerformansBarChart" style="height: 300px;"></div>
                    </div>
                </div>
            </div>
            <div class="col-lg-6 col-md-12 col-sm-12 col-xs-12 ui-sortable">
                <!-- HAFTALIK YOĞUNLUK DAĞILIMI CHART -->
                <div class="box box-primary">
                    <div class="box-header with-border">
                        <i class="fa fa-bar-chart-o"></i>
                        <h3 class="box-title">Günlere göre yoğunluk dağılımı</h3>
                        <span data-toggle="tooltip" title="" class="badge bg-yellow" data-original-title="Bulunduğunuz haftanın verilerine göre.">?</span>
                        <div class="box-tools pull-right">
                            <button type="button" class="btn btn-box-tool" data-widget="collapse">
                                <i class="fa fa-minus"></i>
                            </button>
                        </div>
                    </div>
                    <div class="box-body">
                        <div id="haftalikYogunlukDagilimBarChart" style="height: 300px;"></div>
                    </div>
                </div>
            </div>
        </div>
        <div class="row">
            <div class="col-lg-12 col-md-12 col-sm-12 col-xs-12 ui-sortable">
                <!-- AYLIK CİRO MİKTARLARI CHART -->
                <div class="box box-info">
                    <div class="box-header with-border">
                        <h3 class="box-title">Aylara Göre Ciro Miktarları</h3>

                        <div class="box-tools pull-right">
                            <button type="button" class="btn btn-box-tool" data-widget="collapse">
                                <i class="fa fa-minus"></i>
                            </button>
                        </div>
                    </div>
                    <div class="box-body">
                        <div class="chart">
                            <canvas id="aylaraGoreCiroMiktarlariLineChart" style="height:250px"></canvas>
                        </div>
                    </div>
                    <!-- /.box-body -->
                </div>
                <!-- /.box -->
            </div>
        </div>
        <div class="row">
            <div class="col-lg-6 col-md-12 col-sm-12 col-xs-12 ui-sortable">
                <!-- GÜNLÜK EN ÇOK SİPARİŞ EDİLEN ÜRÜNLER CHART -->
                <div class="box box-danger">
                    <div class="box-header with-border">
                        <h3 class="box-title">Günlük En Çok Sipariş Edilen Ürünler</h3>

                        <div class="box-tools pull-right">
                            <button type="button" class="btn btn-box-tool" data-widget="collapse">
                                <i class="fa fa-minus"></i>
                            </button>
                        </div>
                    </div>
                    <div class="box-body">
                        <canvas id="gunlukEnCokSiparisEdilenUrunlerPieChart" style="height:250px"></canvas>
                    </div>
                    <!-- /.box-body -->
                </div>
                <!-- /.box -->
            </div>
            <div class="col-lg-6 col-md-12 col-sm-12 col-xs-12 ui-sortable">
                <!-- AYLIK EN ÇOK SİPARİŞ EDİLEN ÜRÜNLER CHART -->
                <div class="box box-danger">
                    <div class="box-header with-border">
                        <h3 class="box-title">Aylık En Çok Sipariş Edilen Ürünler</h3>

                        <div class="box-tools pull-right">
                            <button type="button" class="btn btn-box-tool" data-widget="collapse">
                                <i class="fa fa-minus"></i>
                            </button>
                        </div>
                    </div>
                    <div class="box-body">
                        <canvas id="aylikEnCokSiparisEdilenUrunlerPieChart" style="height:250px"></canvas>
                    </div>
                    <!-- /.box-body -->
                </div>
                <!-- /.box -->
            </div>
        </div>
        <div class="row">
            <div class="col-lg-6 col-md-12 col-sm-12 col-xs-12 ui-sortable">
                <!-- KATEGORİLERİN AYLIK VE YILLIK SATIŞI -->
                <div class="box box-success">
                    <div class="box-header with-border">
                        <h3 class="box-title">Kategorilere Göre Aylık ve Yıllık Satışı</h3>
                        <div class="box-tools pull-right">
                            <button type="button" class="btn btn-box-tool" data-widget="collapse">
                                <i class="fa fa-minus"></i>
                            </button>
                        </div>
                    </div>
                    <div class="box-body">
                        <div class="chart">
                            <canvas id="kategoriAylikYillikChart" style="height:230px"></canvas>
                        </div>
                    </div>
                    <!-- /.box-body -->
                </div>
                <!-- /.box -->
            </div>
            <div class="col-lg-6 col-md-12 col-sm-12 col-xs-12 ui-sortable">
                <!-- YILLIK AYLIK GÜNLÜK ÖDEME YÖNTEMİ YÜZDELERİ VE MİKTARLARI -->
                <div class="box box-success">
                    <div class="box-header with-border">
                        <h3 class="box-title">Yıl-Ay-Günlük Ödeme Yöntemi Miktarları</h3>
                        <div class="box-tools pull-right">
                            <button type="button" class="btn btn-box-tool" data-widget="collapse">
                                <i class="fa fa-minus"></i>
                            </button>
                        </div>
                    </div>
                    <div class="box-body">
                        <div class="chart">
                            <canvas id="odemeYontemleriChart" style="height:230px"></canvas>
                        </div>
                    </div>
                    <!-- /.box-body -->
                </div>
                <!-- /.box -->
            </div>
        </div>
    </section>
</div>
<script type="text/javascript" charset="utf-8">
    $(function () {

        //-------------
        //- GUNLUK EN ÇOK SİPARİŞ EDİLEN ÜRÜNLER-
        //-------------
        // Get context with jQuery - using jQuery's .get() method.
        var pieChartCanvas = $("#gunlukEnCokSiparisEdilenUrunlerPieChart").get(0).getContext("2d");
        var pieChart = new Chart(pieChartCanvas);
        var PieData = [
            @{ int sayac = 0;}
            @foreach (var a in Model.SiparisUrunleri.Where(x=>x.Siparisler.siparisTarihi.Date==DateTime.Now.Date).GroupBy(x => x.Urunler.urunAd).Take(5))
            {
                sayac++;
                <text>
                        {
                            value: @a.Count(),
                            @{
                                if      (sayac == 1) { <text>color: "#f56954", highlight: "#f56954",</text>}
                                else if (sayac == 2) { <text>color: "#00a65a", highlight: "#00a65a",</text>}
                                else if (sayac == 3) { <text>color: "#f39c12", highlight: "#f39c12",</text>}
                                else if (sayac == 4) { <text>color: "#00c0ef", highlight: "#00c0ef",</text>}
                                else if (sayac == 5) { <text>color: "#3c8dbc", highlight: "#3c8dbc",</text>}
                            }

                            label: "@a.Key.Replace('ç', 'c').Replace('Ç', 'C').Replace('İ', 'I').Replace('ı', 'i').Replace('Ö', 'O').Replace('ö', 'o').Replace('Ü', 'U').Replace('ü', 'u').Replace('Ş', 'S').Replace('ş', 's')"
                        },
                </text>
            }
        ];
        var pieOptions = {
            //Boolean - Whether we should show a stroke on each segment
            segmentShowStroke: true,
            //String - The colour of each segment stroke
            segmentStrokeColor: "#fff",
            //Number - The width of each segment stroke
            segmentStrokeWidth: 2,
            //Number - The percentage of the chart that we cut out of the middle
            percentageInnerCutout: 50, // This is 0 for Pie charts
            //Number - Amount of animation steps
            animationSteps: 100,
            //String - Animation easing effect
            animationEasing: "easeOutBounce",
            //Boolean - Whether we animate the rotation of the Doughnut
            animateRotate: true,
            //Boolean - Whether we animate scaling the Doughnut from the centre
            animateScale: false,
            //Boolean - whether to make the chart responsive to window resizing
            responsive: true,
            // Boolean - whether to maintain the starting aspect ratio or not when responsive, if set to false, will take up entire container
            maintainAspectRatio: true,
            //String - A legend template
            legendTemplate: "<ul class=\"<%=name.toLowerCase()%>-legend\"><% for (var i=0; i<segments.length; i++){%><li><span style=\"background-color:<%=segments[i].fillColor%>\"></span><%if(segments[i].label){%><%=segments[i].label%><%}%></li><%}%></ul>"
        };
        //Create pie or douhnut chart
        // You can switch between pie and douhnut using the method below.
        pieChart.Doughnut(PieData, pieOptions);

</script>
<script>
        //-------------
        //- AYLIK EN ÇOK SİPARİŞ EDİLEN ÜRÜNLER -
        //-------------
        // Get context with jQuery - using jQuery's .get() method.
        var pieChartCanvas2 = $("#aylikEnCokSiparisEdilenUrunlerPieChart").get(0).getContext("2d");
        var pieChart2 = new Chart(pieChartCanvas2);
        var PieData2 = [
            @foreach (var a in Model.SiparisUrunleri.Where(x=>x.Siparisler.siparisTarihi.Date.Month == DateTime.Now.Date.Month && x.Siparisler.siparisTarihi.Date.Year == DateTime.Now.Date.Year).GroupBy(x => x.Urunler.urunAd).Take(5))
            {

                    <text>
                        {
                            value: @a.Count(),
                            label: "@a.Key.Replace('ç', 'c').Replace('Ç', 'C').Replace('İ', 'I').Replace('ı', 'i').Replace('Ö', 'O').Replace('ö', 'o').Replace('Ü', 'U').Replace('ü', 'u').Replace('Ş', 'S').Replace('ş', 's')"
                        },
                    </text>
                }
        ];
        var pieOptions2 = {
            //Boolean - Whether we should show a stroke on each segment
            segmentShowStroke: true,
            //String - The colour of each segment stroke
            segmentStrokeColor: "#fff",
            //Number - The width of each segment stroke
            segmentStrokeWidth: 2,
            //Number - The percentage of the chart that we cut out of the middle
            percentageInnerCutout: 50, // This is 0 for Pie charts
            //Number - Amount of animation steps
            animationSteps: 100,
            //String - Animation easing effect
            animationEasing: "easeOutBounce",
            //Boolean - Whether we animate the rotation of the Doughnut
            animateRotate: true,
            //Boolean - Whether we animate scaling the Doughnut from the centre
            animateScale: false,
            //Boolean - whether to make the chart responsive to window resizing
            responsive: true,
            // Boolean - whether to maintain the starting aspect ratio or not when responsive, if set to false, will take up entire container
            maintainAspectRatio: true,
            //String - A legend template
            legendTemplate: "<ul class=\"<%=name.toLowerCase()%>-legend\"><% for (var i=0; i<segments.length; i++){%><li><span style=\"background-color:<%=segments[i].fillColor%>\"></span><%if(segments[i].label){%><%=segments[i].label%><%}%></li><%}%></ul>"
        };
        //Create pie or douhnut chart
        // You can switch between pie and douhnut using the method below.
        pieChart2.Doughnut(PieData2, pieOptions2);
</script>
<script>
        //--------------
        //- BAŞLA AYLARA GÖRE CİRO MİKTARLARI -
        //--------------

        var areaChartData = {
            labels: ["Ocak", "Şubat", "Mart", "Nisan", "Mayıs", "Haziran", "Temmuz", "Ağustos", "Eylül", "Ekim", "Kasım", "Aralık"],
            datasets: [
              {
                  label: "Bu Sene",
                  fillColor: "rgba(60,141,188,0.9)",
                  strokeColor: "rgba(60,141,188,0.8)",
                  pointColor: "#3b8bba",
                  pointStrokeColor: "rgba(60,141,188,1)",
                  pointHighlightFill: "#fff",
                  pointHighlightStroke: "rgba(60,141,188,1)",
                  data: [
                          @for(int i=1; i <= 12; i++)
                          {
                              <text>
                              @Convert.ToInt32(Model.SiparisUrunleri.Where(x => x.Siparisler.siparisTarihi.Month == i && x.Siparisler.siparisTarihi.Year == DateTime.Now.Year).Sum(x => x.Urunler.urunFiyat) + Model.SiparisUrunleri.Where(x => x.Siparisler.siparisTarihi.Month == i && x.Siparisler.siparisTarihi.Year == DateTime.Now.Year).Select(y => y.UrunOzellikler.urunOzellikFiyat).Sum() + Model.SiparisUrunleriEkstralari.Where(x => x.SiparisUrunleri.Siparisler.siparisTarihi.Month == i && x.SiparisUrunleri.Siparisler.siparisTarihi.Year == DateTime.Now.Year).Sum(x => x.UrunEkstralar.urunEkstraFiyat)),
                              </text>
                          }
                  ]
              },
              {
                  label: "Geçen Sene",
                  fillColor: "rgba(210, 214, 222, 1)",
                  strokeColor: "rgba(210, 214, 222, 1)",
                  pointColor: "rgba(210, 214, 222, 1)",
                  pointStrokeColor: "#c1c7d1",
                  pointHighlightFill: "#fff",
                  pointHighlightStroke: "rgba(220,220,220,1)",
                  data: [
                            @for(int i=1; i <= 12; i++)
                            {
                                <text>
                                @Convert.ToInt32(Model.SiparisUrunleri.Where(x => x.Siparisler.siparisTarihi.Month == i && x.Siparisler.siparisTarihi.AddYears(1).Year == DateTime.Now.Year).Sum(x => x.Urunler.urunFiyat) + Model.SiparisUrunleri.Where(x => x.Siparisler.siparisTarihi.Month == i && x.Siparisler.siparisTarihi.AddYears(1).Year == DateTime.Now.Year).Select(y => y.UrunOzellikler.urunOzellikFiyat).Sum() + Model.SiparisUrunleriEkstralari.Where(x => x.SiparisUrunleri.Siparisler.siparisTarihi.Month == i && x.SiparisUrunleri.Siparisler.siparisTarihi.AddYears(1).Year == DateTime.Now.Year).Sum(x => x.UrunEkstralar.urunEkstraFiyat)),
                                </text>
                            }
                  ]
              }
            ]
        };

        var areaChartOptions = {
            //Boolean - If we should show the scale at all
            showScale: true,
            //Boolean - Whether grid lines are shown across the chart
            scaleShowGridLines: false,
            //String - Colour of the grid lines
            scaleGridLineColor: "rgba(0,0,0,.05)",
            //Number - Width of the grid lines
            scaleGridLineWidth: 1,
            //Boolean - Whether to show horizontal lines (except X axis)
            scaleShowHorizontalLines: true,
            //Boolean - Whether to show vertical lines (except Y axis)
            scaleShowVerticalLines: true,
            //Boolean - Whether the line is curved between points
            bezierCurve: true,
            //Number - Tension of the bezier curve between points
            bezierCurveTension: 0.3,
            //Boolean - Whether to show a dot for each point
            pointDot: false,
            //Number - Radius of each point dot in pixels
            pointDotRadius: 4,
            //Number - Pixel width of point dot stroke
            pointDotStrokeWidth: 1,
            //Number - amount extra to add to the radius to cater for hit detection outside the drawn point
            pointHitDetectionRadius: 20,
            //Boolean - Whether to show a stroke for datasets
            datasetStroke: true,
            //Number - Pixel width of dataset stroke
            datasetStrokeWidth: 2,
            //Boolean - Whether to fill the dataset with a color
            datasetFill: true,
            //String - A legend template
            legendTemplate: "<ul class=\"<%=name.toLowerCase()%>-legend\"><% for (var i=0; i<datasets.length; i++){%><li><span style=\"background-color:<%=datasets[i].lineColor%>\"></span><%if(datasets[i].label){%><%=datasets[i].label%><%}%></li><%}%></ul>",
            //Boolean - whether to maintain the starting aspect ratio or not when responsive, if set to false, will take up entire container
            maintainAspectRatio: true,
            //Boolean - whether to make the chart responsive to window resizing
            responsive: true
        };

        //Create the line chart
        //areaChart.Line(areaChartData, areaChartOptions);


        var lineChartCanvas = $("#aylaraGoreCiroMiktarlariLineChart").get(0).getContext("2d");
        var lineChart = new Chart(lineChartCanvas);
        var lineChartOptions = areaChartOptions;
        lineChartOptions.datasetFill = false;
        lineChart.Line(areaChartData, lineChartOptions);
        //-------------
        //- BİTİR AYLARA GÖRE CİRO MİKTARLARI -
        //--------------



</script>
<script>



        /*
         * BAŞLA PERSONEL PERFORMANSI
         * ---------
         */

        var bar_data = {
            data: [
                @foreach (var a in Model.Siparisler.Where(x=>x.Personeller.masaModuMu==false && x.Personeller.silindi==false && x.siparisTarihi.Month ==DateTime.Now.Month && x.siparisTarihi.Year==DateTime.Now.Year).GroupBy(x => x.Personeller.personelAd))
                {
                    <text>["@a.Key - %@(Convert.ToDecimal(a.Count() * 100 / Model.Siparisler.Count))", @(Convert.ToDecimal(a.Count() * 100 / Model.Siparisler.Count))],</text>
                }
                ["Silinen Personel", @Model.Siparisler.Where(x=>x.Personeller.masaModuMu==false && x.Personeller.silindi== true && x.siparisTarihi.Month == DateTime.Now.Month && x.siparisTarihi.Year == DateTime.Now.Year).Count()]
            ],
            color: "#3c8dbc"
        };
        $.plot("#personelPerformansBarChart", [bar_data], {
            grid: {
                borderWidth: 1,
                borderColor: "#f3f3f3",
                tickColor: "#f3f3f3"
            },
            series: {
                bars: {
                    show: true,
                    barWidth: 0.5,
                    align: "center"
                }
            },
            xaxis: {
                mode: "categories",
                tickLength: 0
            }
        });
        /* BİTİR  PERSONEL PERFORMANSI */







    });
</script>
<script type="text/javascript" charset="utf-8">
    $(function () {
        /*
         * BAŞLA HAFTALIK YOĞUNLUK DAĞILIMI
         * ---------
         */
        var bar_data2 = {
            data: [
                @{
                    int pazartesiCount = ViewBag.pazartesiCount;
                    int saliCount = ViewBag.saliCount;
                    int carsambaCount = ViewBag.carsambaCount;
                    int persembeCount = ViewBag.persembeCount;
                    int cumaCount = ViewBag.cumaCount;
                    int cumartesiCount = ViewBag.cumartesiCount;
                    int pazarCount = ViewBag.pazarCount;
                    int toplamCount = (int)ViewBag.toplamCount == 0 ? 1 : ViewBag.toplamCount;
                }

                [
                    "Pazartesi - @(pazartesiCount * 100 / toplamCount)", @(pazartesiCount * 100 / toplamCount)
                ],
                [
                    "Salı - @(saliCount * 100 / toplamCount)",@(saliCount * 100 / toplamCount)
                ],
                [
                    "Çarşamba - @(carsambaCount * 100 / toplamCount)", @(carsambaCount * 100 / toplamCount)
                ],
                [
                    "Perşembe - @(persembeCount * 100 / toplamCount)", @(persembeCount * 100 / toplamCount)
                ],
                [
                    "Cuma - @(cumaCount * 100 / toplamCount)", @(cumaCount * 100 / toplamCount)
                ],
                [
                    "Cumartesi - @(cumartesiCount * 100 / toplamCount)", @(cumartesiCount * 100 / toplamCount)
                ],
                [
                    "Pazar - @(pazarCount * 100 / toplamCount)", @(pazarCount * 100 / toplamCount)
                ]






            ],
            color: "#3c8dbc"
        };
        $.plot("#haftalikYogunlukDagilimBarChart", [bar_data2], {
            grid: {
                borderWidth: 1,
                borderColor: "#f3f3f3",
                tickColor: "#f3f3f3"
            },
            series: {
                bars: {
                    show: true,
                    barWidth: 0.5,
                    align: "center"
                }
            },
            xaxis: {
                mode: "categories",
                tickLength: 0
            }
        });
        /*BİTİŞ HAFTALIK YOĞUNLUK DAĞILIMI */



    });
</script>
<script type="text/javascript" charset="utf-8">

    /*
     * Custom Label formatter
     * ----------------------
     */
    function labelFormatter(label, series) {
        return '<div style="font-size:13px; text-align:center; padding:2px; color: #fff; font-weight: 600;">'
            + label
            + "<br>"
            + Math.round(series.percent) + "%</div>";
    }
    //-------------
    //- Kategorilerin Aylık ve Yıllık Satışı CHART -
    //-------------
    var kategoriAylikYillikChartCanvas = $("#kategoriAylikYillikChart").get(0).getContext("2d");
    var kategoriAylikYillikChart = new Chart(kategoriAylikYillikChartCanvas);
    var kategoriAylikYillikChartData = {
        labels: [
            @foreach (var kategori in Model.UrunKategoriler) {

            <text>'@kategori.urunKategoriAd.Replace('ç', 'c').Replace('Ç', 'C').Replace('İ', 'I').Replace('ı', 'i').Replace('Ö', 'O').Replace('ö', 'o').Replace('Ü', 'U').Replace('ü', 'u').Replace('Ş', 'S').Replace('ş', 's')',</text>
            }

        ],
        datasets: [
                      {
                          label: "Bu Ay",
                          fillColor: "rgba(60,141,188,0.9)",
                          strokeColor: "rgba(60,141,188,0.8)",
                          pointColor: "#3b8bba",
                          pointStrokeColor: "rgba(60,141,188,1)",
                          pointHighlightFill: "#fff",
                          pointHighlightStroke: "rgba(60,141,188,1)",
                          data:     [
                                  @foreach(var i in Model.UrunKategoriler)
                                    {
                                        <text>
                                      @(
                                          Convert.ToInt32
                                          (
                                            Model.SiparisUrunleri.Where(x => x.Urunler.urunKategoriId == i.urunKategoriId && x.Siparisler.siparisTarihi.Month == DateTime.Now.Month && x.Siparisler.siparisTarihi.Year == DateTime.Now.Year).Sum(x => x.Urunler.urunFiyat) +
                                            Model.SiparisUrunleri.Where(x => x.Urunler.urunKategoriId == i.urunKategoriId && x.Siparisler.siparisTarihi.Month == DateTime.Now.Month && x.Siparisler.siparisTarihi.Year == DateTime.Now.Year).Sum(x=>x.UrunOzellikler.urunOzellikFiyat) +
                                            Model.SiparisUrunleriEkstralari.Where(x => x.SiparisUrunleri.Urunler.urunKategoriId == i.urunKategoriId && x.SiparisUrunleri.Siparisler.siparisTarihi.Month == DateTime.Now.Month && x.SiparisUrunleri.Siparisler.siparisTarihi.Year == DateTime.Now.Year).Sum(x => x.UrunEkstralar.urunEkstraFiyat)
                                          )
                                        ),
                                      </text>
                                    }
                          ]
                      },
                        {
                            label: "Bu Yıl",
                            fillColor: "rgba(210, 214, 222, 1)",
                            strokeColor: "rgba(210, 214, 222, 1)",
                            pointColor: "rgba(210, 214, 222, 1)",
                            pointStrokeColor: "#c1c7d1",
                            pointHighlightFill: "#fff",
                            pointHighlightStroke: "rgba(220,220,220,1)",
                            data:   [
                                        @foreach(var i in Model.UrunKategoriler)
                                        {
                                            <text>
                                            @Convert.ToInt32(Model.SiparisUrunleri.Where(x => x.Urunler.urunKategoriId == i.urunKategoriId && x.Siparisler.siparisTarihi.Year == DateTime.Now.Year).Sum(x => x.Urunler.urunFiyat) + Model.SiparisUrunleri.Where(x => x.Urunler.urunKategoriId == i.urunKategoriId && x.Siparisler.siparisTarihi.Year == DateTime.Now.Year).Select(y => y.UrunOzellikler.urunOzellikFiyat).Sum() + Model.SiparisUrunleriEkstralari.Where(x => x.SiparisUrunleri.Urunler.urunKategoriId == i.urunKategoriId && x.SiparisUrunleri.Siparisler.siparisTarihi.Year == DateTime.Now.Year).Sum(x => x.UrunEkstralar.urunEkstraFiyat)),
                                            </text>
                                        }
                            ]
                        }
        ]
    };
    kategoriAylikYillikChartData.datasets[1].fillColor = "#00a65a";
    kategoriAylikYillikChartData.datasets[1].strokeColor = "#00a65a";
    kategoriAylikYillikChartData.datasets[1].pointColor = "#00a65a";
    var kategoriAylikYillikChartOptions = {
        //Boolean - Whether the scale should start at zero, or an order of magnitude down from the lowest value
        scaleBeginAtZero: true,
        //Boolean - Whether grid lines are shown across the chart
        scaleShowGridLines: true,
        //String - Colour of the grid lines
        scaleGridLineColor: "rgba(0,0,0,.05)",
        //Number - Width of the grid lines
        scaleGridLineWidth: 1,
        //Boolean - Whether to show horizontal lines (except X axis)
        scaleShowHorizontalLines: true,
        //Boolean - Whether to show vertical lines (except Y axis)
        scaleShowVerticalLines: true,
        //Boolean - If there is a stroke on each bar
        barShowStroke: true,
        //Number - Pixel width of the bar stroke
        barStrokeWidth: 2,
        //Number - Spacing between each of the X value sets
        barValueSpacing: 5,
        //Number - Spacing between data sets within X values
        barDatasetSpacing: 1,
        //String - A legend template
        legendTemplate: "<ul class=\"<%=name.toLowerCase()%>-legend\"><% for (var i=0; i<datasets.length; i++){%><li><span style=\"background-color:<%=datasets[i].fillColor%>\"></span><%if(datasets[i].label){%><%=datasets[i].label%><%}%></li><%}%></ul>",
        //Boolean - whether to make the chart responsive
        responsive: true,
        maintainAspectRatio: true
    };

    kategoriAylikYillikChartOptions.datasetFill = false;
    kategoriAylikYillikChart.Bar(kategoriAylikYillikChartData, kategoriAylikYillikChartOptions);

</script>
<script type="text/javascript" charset="utf-8">

    //-------------
    //- Ödeme Yöntemleri CHART -
    //-------------
    var odemeYontemleriChartCanvas = $("#odemeYontemleriChart").get(0).getContext("2d");
    var odemeYontemleriChart = new Chart(odemeYontemleriChartCanvas);
    var odemeYontemleriChartData = {
        labels: [
            @foreach(var odemeTuru in Model.OdemeTurleri)
            {
                <text>
                "@odemeTuru.odemeTurAd",
                </text>
            }

    ],
    datasets: [
                  {
                      label: "Bugün",
                      fillColor: "rgba(60,141,188,0.9)",
                      strokeColor: "rgba(60,141,188,0.8)",
                      pointColor: "#3b8bba",
                      pointStrokeColor: "rgba(60,141,188,1)",
                      pointHighlightFill: "#fff",
                      pointHighlightStroke: "rgba(60,141,188,1)",
                      data: [
                                @foreach(var odemeTuru in Model.OdemeTurleri)
                                {
                                    <text>
                                    @odemeTuru.Odemeler.Where(x=>x.odemeTarihi >= sabahTarihSaat && x.odemeTarihi <= geceTarihSaat).Sum(x=>x.odemeMiktar),
                                    </text>
                                }
                            ]
                    },{
                      label: "Bu Ay",
                      fillColor: "rgba(60,141,188,0.9)",
                      strokeColor: "rgba(60,141,188,0.8)",
                      pointColor: "#3b8bba",
                      pointStrokeColor: "rgba(60,141,188,1)",
                      pointHighlightFill: "#fff",
                      pointHighlightStroke: "rgba(60,141,188,1)",
                      data: [

                                @foreach(var odemeTuru in Model.OdemeTurleri)
                                {
                                    <text>
                                    @odemeTuru.Odemeler.Where(x=>x.odemeTarihi.Year == DateTime.Now.Year && x.odemeTarihi.Month == DateTime.Now.Month).Sum(x=>x.odemeMiktar),
                                    </text>
                                }
                            ]
                    },
                    {
                        label: "Bu Yıl",
                        fillColor: "rgba(210, 214, 222, 1)",
                        strokeColor: "rgba(210, 214, 222, 1)",
                        pointColor: "rgba(210, 214, 222, 1)",
                        pointStrokeColor: "#c1c7d1",
                        pointHighlightFill: "#fff",
                        pointHighlightStroke: "rgba(220,220,220,1)",
                        data:   [

                                @foreach(var odemeTuru in Model.OdemeTurleri)
                                {
                                    <text>
                                    @odemeTuru.Odemeler.Where(x=>x.odemeTarihi.Year == DateTime.Now.Year).Sum(x=>x.odemeMiktar),
                                    </text>
                                }
                            ]
                    }
            ]
    };
    odemeYontemleriChartData.datasets[1].fillColor = "#00a65a";
    odemeYontemleriChartData.datasets[1].strokeColor = "#00a65a";
    odemeYontemleriChartData.datasets[1].pointColor = "#00a65a";
    var odemeYontemleriChartOptions = {
        //Boolean - Whether the scale should start at zero, or an order of magnitude down from the lowest value
        scaleBeginAtZero: true,
        //Boolean - Whether grid lines are shown across the chart
        scaleShowGridLines: true,
        //String - Colour of the grid lines
        scaleGridLineColor: "rgba(0,0,0,.05)",
        //Number - Width of the grid lines
        scaleGridLineWidth: 1,
        //Boolean - Whether to show horizontal lines (except X axis)
        scaleShowHorizontalLines: true,
        //Boolean - Whether to show vertical lines (except Y axis)
        scaleShowVerticalLines: true,
        //Boolean - If there is a stroke on each bar
        barShowStroke: true,
        //Number - Pixel width of the bar stroke
        barStrokeWidth: 2,
        //Number - Spacing between each of the X value sets
        barValueSpacing: 5,
        //Number - Spacing between data sets within X values
        barDatasetSpacing: 1,
        //String - A legend template
        legendTemplate: "<ul class=\"<%=name.toLowerCase()%>-legend\"><% for (var i=0; i<datasets.length; i++){%><li><span style=\"background-color:<%=datasets[i].fillColor%>\"></span><%if(datasets[i].label){%><%=datasets[i].label%><%}%></li><%}%></ul>",
        //Boolean - whether to make the chart responsive
        responsive: true,
        maintainAspectRatio: true
    };

    odemeYontemleriChartOptions.datasetFill = false;
    odemeYontemleriChart.Bar(odemeYontemleriChartData, odemeYontemleriChartOptions);
</script>
